/*  Copyright (c) 2009 Platogo Interactive Entertainment GmbH  Permission is hereby granted, free of charge, to any person obtaining a copy  of this software and associated documentation files (the "Software"), to deal  in the Software without restriction, including without limitation the rights  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  copies of the Software, and to permit persons to whom the Software is  furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in  all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  THE SOFTWARE.*/package com.platogo.components {	import com.platogo.api.PlatogoAPI;	import com.platogo.api.enums.LevelFilter;	import com.platogo.api.enums.LevelSort;	import com.platogo.api.enums.PlatogoStatus;	import com.platogo.api.enums.SortOrder;	import com.platogo.api.vo.Level;	import com.platogo.api.vo.LevelList;	import com.platogo.api.vo.PlatogoResponse;	import com.platogo.components.core.BaseComponent;	import com.platogo.components.core.DisplayDummy;	import com.platogo.components.entries.LevelEntry;	import com.platogo.components.events.PlayEvent;	import com.platogo.components.ui.RadioButtonGroup;	import com.platogo.components.utils.Library;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;			/**	 * @author sirflo	 */	// TODO: add levelStatus as parameter	public class LevelBrowser extends BaseComponent	{	// ============================================================================================				public static var DEFAULT_PAGE_SIZE : uint = 5;		private static var DP_LEVEL_SORTS : Array = [ {label:"Most Recent", data:"DATE_MODIFIED_DESCENDING"}, {label:"Least Recent", data:"DATE_MODIFIED_ASCENDING"}, {label:"Best Rated", data:"QUALITY_DESCENDING"}, {label:"Worst Rated", data:"QUALITY_ASCENDING"}, {label:"Most Played", data:"PLAYS_DESCENDING"}, {label:"Least Played", data:"PLAYS_ASCENDING"}, {label:"Name A>Z", data:"NAME_ASCENDING"}, {label:"Name Z>A", data:"NAME_DESCENDING"} ];		private static var DP_LEVEL_DIFFICULTIES : Array = [ {label:"All", data:0}, {label:"Very Easy", data:1}, {label:"Easy", data:2}, {label:"Medium", data:3}, {label:"Hard", data:4}, {label:"Very Hard", data:5} ];			// ============================================================================================				public var skin : MovieClip;		private var _page : uint = 1;		private var _pageSize : uint = LevelBrowser.DEFAULT_PAGE_SIZE;		private var _totalPages : uint;				private var _levelEntries : Array;		private var _levelEntriesIndex : uint;				private var _levelFiltersGroup : RadioButtonGroup;				private var _levelFilters : Array;		private var _levelSort : LevelSort;		private var _sortOrder : SortOrder;		private var _difficulty : uint;		private var _levelCategories : Array;				private var _changed : Boolean;		private var _waitForResponse : Boolean;			// ============================================================================================		public function LevelBrowser()		{			DisplayDummy.substituteMissingChildren( skin, [ "loadingIndicator", "tabAllLevels", "tabMyFavorites", "tabCreatedByFriends",				"levelSorts", "levelDifficulties", "previousPage", "nextPage", "close" ] );							_levelEntries = new Array();		}			// ============================================================================================				override protected function initialize() : void		{			_levelFiltersGroup = new RadioButtonGroup();			_levelFiltersGroup.addRadioButton( skin.tabAllLevels );			_levelFiltersGroup.addRadioButton( skin.tabMyFavorites );			_levelFiltersGroup.addRadioButton( skin.tabCreatedByFriends );			_levelFiltersGroup.selection = skin.tabAllLevels;							// set defaults			skin.loadingIndicator.visible = false;			updatePageButtons();						skin.levelSorts.dataProvider = LevelBrowser.DP_LEVEL_SORTS;			skin.levelDifficulties.dataProvider = LevelBrowser.DP_LEVEL_DIFFICULTIES;						retrieveLevelFilter();			retrieveLevelSort();			retrieveLevelDifficulty();						_levelEntriesIndex = determineLevelEntriesIndex();						// add listeners			_levelFiltersGroup.addEventListener( Event.CHANGE, levelFilterChangeListener, false, 0, true );			skin.levelSorts.addEventListener( Event.CHANGE, levelSortChangeListener, false, 0, true );			skin.levelDifficulties.addEventListener( Event.CHANGE, levelDifficultyChangeListener, false, 0, true );			skin.previousPage.addEventListener( MouseEvent.CLICK, pageClickListener, false, 0, true );			skin.nextPage.addEventListener( MouseEvent.CLICK, pageClickListener, false, 0, true );						skin.close.addEventListener( MouseEvent.CLICK, closeClickListener, false, 0, true );		}				override protected function cleanup() : void		{			clearLevels();						// remove listeners			_levelFiltersGroup.removeEventListener( Event.CHANGE, levelFilterChangeListener );			skin.levelSorts.removeEventListener( Event.CHANGE, levelSortChangeListener );			skin.levelDifficulties.removeEventListener( Event.CHANGE, levelDifficultyChangeListener );			skin.previousPage.removeEventListener( MouseEvent.CLICK, pageClickListener );			skin.nextPage.removeEventListener( MouseEvent.CLICK, pageClickListener );			skin.close.removeEventListener( MouseEvent.CLICK, closeClickListener );						_levelFiltersGroup.dispose();			_levelFiltersGroup = null;		}				override protected function draw() : void		{			if ( _waitForResponse )	return;			_waitForResponse = true;			_changed = false;						skin.loadingIndicator.visible = true;			clearLevels();			PlatogoAPI.levelService.findLevels( _levelFilters, _difficulty, _levelCategories, _levelSort, _sortOrder, _pageSize, _page, findLevelsHandler );		}				protected function findLevelsHandler( response : PlatogoResponse ) : void		{			skin.loadingIndicator.visible = false;						_totalPages = 0;						if ( response.status == PlatogoStatus.OK )			{				var levelList : LevelList = response.data as LevelList;				_totalPages = Math.ceil( levelList.totalLevels / _pageSize );								displayLevels( levelList );			}			else if ( response.status == PlatogoStatus.NOT_LOGGED_IN )			{				addEntry( Library.getAsset( "com.platogo.components.assets.LevelEntry_logIn" ), 0 );			}			updatePageButtons();						_waitForResponse = false;			if ( _changed )			{				draw();			}		}				override public function invalidate() : void		{			_changed = true;			super.invalidate();		}			// ============================================================================================				protected function determineLevelEntriesIndex() : uint		{			if ( skin.levelSorts is DisplayObject )			{				return skin.getChildIndex( skin.levelSorts );			}			else if ( skin.levelDifficulties is DisplayObject )			{				return skin.getChildIndex( skin.levelDifficulties );			}			else			{				return skin.numChildren;			}		}				protected function displayLevels( levelList : LevelList ) : void		{			var level : Level;			var levelEntry : LevelEntry;						if ( levelList.levels.length > 0 )			{				for ( var i:int=0; i<levelList.levels.length; ++i )				{					level = levelList.levels[ i ] as Level;									levelEntry = new LevelEntry( );					addEntry( levelEntry, i );										levelEntry.level = level;					levelEntry.addEventListener( MouseEvent.CLICK, levelEntryClickListener, false, 0, true );				}			}			else			{				addEntry( Library.getAsset( "com.platogo.components.assets.LevelEntry_noLevels" ), 0 );			}		}				/**		 * 		 */		protected function clearLevels() : void		{			var levelEntry : DisplayObject;						while ( _levelEntries.length )			{				levelEntry = _levelEntries.splice( 0, 1 )[ 0 ];				skin.removeChild( levelEntry  );								if ( levelEntry is LevelEntry )				{					( levelEntry as LevelEntry ).dispose();				}			}		}				protected function addEntry( levelEntry : DisplayObject, position : uint ) : void		{			skin.addChildAt( levelEntry, _levelEntriesIndex );			positionEntry( levelEntry, position );			_levelEntries.push( levelEntry );		}		protected function positionEntry( levelEntry : DisplayObject, position : uint ) : void		{			levelEntry.x = 10;			levelEntry.y = 107 + ( position * 43 );		}				/**		 * 		 */		private function updatePageButtons() : void		{			skin.previousPage.visible = ( _page > 1 );			skin.nextPage.visible = ( _page < _totalPages );		}				private function retrieveLevelFilter() : void		{			// default setting if tabs have been deleted			_levelFilters = [];						switch ( _levelFiltersGroup.selection  )			{//				case skin.tabAllLevels://					_levelFilters = [];//					break;				case skin.tabMyFavorites:					_levelFilters = [ LevelFilter.LEVELS_FAVORED_BY_CURRENTUSER ];					break;				case skin.tabCreatedByFriends:					_levelFilters = [ LevelFilter.LEVELS_CREATED_BY_FRIENDS ];					break;			}		}				private function retrieveLevelSort() : void		{			var sortString : String = skin.levelSorts.selectedItem.data as String;						if ( sortString != null )			{				var splitIndex : int = sortString.lastIndexOf( "_" );								switch ( sortString.slice( 0, splitIndex )  )				{					case "DATE_MODIFIED": _levelSort = LevelSort.DATE_MODIFIED; break;					case "QUALITY": _levelSort = LevelSort.QUALITY;	break;					case "PLAYS": _levelSort = LevelSort.PLAYS;	break;					case "NAME": _levelSort = LevelSort.NAME; break;				}								switch ( sortString.slice( splitIndex+1 )  )				{					case "ASCENDING": _sortOrder = SortOrder.ASCENDING; break;					case "DESCENDING": _sortOrder = SortOrder.DESCENDING; break;				}			}			else			{				// default setting if combobox has been deleted				_levelSort = LevelSort.DATE_MODIFIED;				_sortOrder = SortOrder.ASCENDING;			}		}				private function retrieveLevelDifficulty() : void		{			_difficulty = skin.levelDifficulties.selectedItem.data;		}			// ============================================================================================				private function levelEntryClickListener( event : MouseEvent ) : void		{			if ( _waitForResponse ) return;						var levelEntry : LevelEntry = event.currentTarget as LevelEntry;						if ( autoInvokePlayLevel )			{				PlatogoAPI.levelService.playLevel( levelEntry.level );			}						if ( autoLoadLevelData )			{				_waitForResponse = true;				skin.loadingIndicator.visible = true;								PlatogoAPI.levelService.loadLevelData( levelEntry.level,					function( response : PlatogoResponse ) : void					{						_waitForResponse = false;						skin.loadingIndicator.visible = false;												if ( response.status == PlatogoStatus.OK ) // TODO: do something sensible when error occurs						{							dispatchEvent( new PlayEvent( PlayEvent.PLAY, false, false, levelEntry.level, response.data ) );						}					}				);			}			else			{				dispatchEvent( new PlayEvent( PlayEvent.PLAY, false, false, levelEntry.level ) );			}		}		private function levelFilterChangeListener( event : Event ) : void		{			retrieveLevelFilter();			_page = 1;						invalidate();		}		private function levelSortChangeListener( event : Event ) : void		{			retrieveLevelSort();			_page = 1;						invalidate();		}				private function levelDifficultyChangeListener( event : Event ) : void		{			retrieveLevelDifficulty();			_page = 1;						invalidate();		}				protected function pageClickListener( event : MouseEvent ) : void		{			switch ( event.currentTarget )			{				case skin.previousPage:					--_page;					break;				case skin.nextPage:					++_page;					break;			}			updatePageButtons();						invalidate();		}				protected function closeClickListener( event : MouseEvent ) : void		{			dispatchEvent( new Event( Event.CLOSE ) );		}			// ============================================================================================			[ Inspectable( name="Level Categories" ) ]		public function get levelCategories() : Array		{			return _levelCategories;		}		public function set levelCategories( value : Array ) : void		{			_levelCategories = value;			_page = 1;						invalidate();		}				[ Inspectable( name="Page Size", defaultValue="5" ) ]		public function get pageSize() : uint		{			return _pageSize;		}		public function set pageSize( value : uint ) : void		{			_pageSize = value;			invalidate();		}		[ Inspectable( name="Auto Load LevelData", defaultValue="true" ) ]		public var autoLoadLevelData : Boolean = true;				[ Inspectable( name="Auto Invoke PlayLevel", defaultValue="true" ) ]		public var autoInvokePlayLevel : Boolean = true;	}}