/*  Copyright (c) 2009 Platogo Interactive Entertainment GmbH  Permission is hereby granted, free of charge, to any person obtaining a copy  of this software and associated documentation files (the "Software"), to deal  in the Software without restriction, including without limitation the rights  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  copies of the Software, and to permit persons to whom the Software is  furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in  all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  THE SOFTWARE.*/package com.platogo.components {	import com.platogo.api.PlatogoAPI;	import com.platogo.api.enums.PlatogoStatus;	import com.platogo.api.enums.ScoreFilter;	import com.platogo.api.enums.ScoreType;	import com.platogo.api.vo.Level;	import com.platogo.api.vo.PlatogoResponse;	import com.platogo.api.vo.Score;	import com.platogo.api.vo.ScoreTable;	import com.platogo.api.vo.ScoreboardDefinition;	import com.platogo.components.core.BaseComponent;	import com.platogo.components.core.DisplayDummy;	import com.platogo.components.entries.ScoreEntry;	import com.platogo.components.ui.RadioButtonGroup;	import com.platogo.components.utils.Library;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;		/**	 * @author sirflo	 */	// TODO: GameHighscore & LevelHighscore should probably extend from same base class	public class LevelHighscore extends BaseComponent	{	// ============================================================================================				public static var DEFAULT_PAGE_SIZE : uint = 7;		// ============================================================================================		public var skin : MovieClip;				private var _level : Level;		private var _page : uint = 1;		private var _pageSize : uint = LevelHighscore.DEFAULT_PAGE_SIZE;		private var _totalPages : uint;		private var _userPage : uint;		private var _scoreFilterGroup : RadioButtonGroup;				private var _scoreFilter : ScoreFilter;		private var _scoreEntries : Array;				private var _changed : Boolean;		private var _waitForResponse : Boolean;	// ============================================================================================		public function LevelHighscore()		{			DisplayDummy.substituteMissingChildren( skin, [ "loadingIndicator", "levelName", "scoreboardLabel",				"tabAllUsers", "tabFriends", "jumpToMyScore", "previousPage", "nextPage", "close" ] );							_scoreEntries = new Array();		}			// ============================================================================================				override protected function initialize() : void		{			_scoreFilterGroup = new RadioButtonGroup();			_scoreFilterGroup.addRadioButton( skin.tabAllUsers );			_scoreFilterGroup.addRadioButton( skin.tabFriends );			_scoreFilterGroup.selection = skin.tabAllUsers;						// set defaults			skin.loadingIndicator.visible = false;			skin.jumpToMyScore.visible = false;			updatePageButtons();						retrieveScoreFilter();						// add listeners			_scoreFilterGroup.addEventListener( Event.CHANGE, scoreFilterChangeListener, false, 0, true );			skin.jumpToMyScore.addEventListener( MouseEvent.CLICK, pageClickListener, false, 0, true );			skin.previousPage.addEventListener( MouseEvent.CLICK, pageClickListener, false, 0, true );			skin.nextPage.addEventListener( MouseEvent.CLICK, pageClickListener, false, 0, true );			skin.close.addEventListener( MouseEvent.CLICK, closeClickListener, false, 0, true );		}		override protected function cleanup() : void		{			clearScores();						// remove listeners			_scoreFilterGroup.removeEventListener( Event.CHANGE, scoreFilterChangeListener );			skin.jumpToMyScore.removeEventListener( MouseEvent.CLICK, pageClickListener );			skin.previousPage.removeEventListener( MouseEvent.CLICK, pageClickListener );			skin.nextPage.removeEventListener( MouseEvent.CLICK, pageClickListener );			skin.close.removeEventListener( Event.CHANGE, closeClickListener );						_scoreFilterGroup.dispose();			_scoreFilterGroup = null;		}		 		override protected function draw() : void		{			clearScores();						if ( _level != null )			{				if ( _waitForResponse )	return;				_changed = false;				_waitForResponse = true;								if ( PlatogoAPI.gameInformation.levelScoreboardDefinition != null )				{					skin.loadingIndicator.visible = true;										skin.scoreboardLabel.text = PlatogoAPI.gameInformation.levelScoreboardDefinition.label;															PlatogoAPI.highscoreService.getLevelScoreTable( _level, _scoreFilter, _pageSize, _page, getGameScoreTableHandler );				}			}		}				protected function getGameScoreTableHandler( response : PlatogoResponse ) : void		{			skin.loadingIndicator.visible = false;						_totalPages = 0;						if ( response.status == PlatogoStatus.OK )			{				var scoreTable : ScoreTable = response.data as ScoreTable;				_totalPages = Math.ceil( scoreTable.totalScores / _pageSize );				if ( scoreTable.currentUserPosition )				{					_userPage = Math.ceil( scoreTable.currentUserPosition / _pageSize );					skin.jumpToMyScore.visible = ( _userPage != _page );				}				else				{					skin.jumpToMyScore.visible = false;				}								displayScores( scoreTable );			}			else if ( response.status == PlatogoStatus.NOT_LOGGED_IN )			{				addEntry( Library.getAsset( "com.platogo.components.assets.ScoreEntry_logIn" ), 0 );			}							updatePageButtons();						_waitForResponse = false;			if ( _changed )			{				draw();			}		}				override public function invalidate() : void		{			_changed = true;			super.invalidate();		}	// ============================================================================================				protected function displayScores( scoreTable : ScoreTable ) : void		{			var score : Score;			var scoreEntry : ScoreEntry;						var previousScore : int = -1;			var startPos : int = ( _page - 1 ) * _pageSize + 1;						if ( scoreTable.scores.length > 0 )			{				for ( var i:int=0; i<scoreTable.scores.length; ++i )				{					score = scoreTable.scores[ i ] as Score;									scoreEntry = new ScoreEntry();					addEntry( scoreEntry, i );										scoreEntry.timeBased = ( PlatogoAPI.gameInformation.levelScoreboardDefinition.type == ScoreType.TIME_ABSOLUTE ) || ( PlatogoAPI.gameInformation.levelScoreboardDefinition.type == ScoreType.TIME_RELATIVE );					scoreEntry.score = score;					scoreEntry.position = ( previousScore != score.value ) ? ( startPos+i ) : 0;						previousScore = score.value;				}			}			else			{				addEntry( Library.getAsset( "com.platogo.components.assets.ScoreEntry_noScores" ), 0 );			}		}				protected function clearScores() : void		{			var scoreEntry : DisplayObject;						while ( _scoreEntries.length )			{				scoreEntry = _scoreEntries.splice( 0, 1 )[ 0 ];				skin.removeChild( scoreEntry );				if ( scoreEntry is ScoreEntry )				{					( scoreEntry as ScoreEntry ).dispose();				}			}		}				protected function addEntry( scoreEntry : DisplayObject, position : uint ) : void		{			skin.addChild( scoreEntry );			positionEntry( scoreEntry, position );			_scoreEntries.push( scoreEntry );		}				protected function positionEntry( scoreEntry : DisplayObject, position : uint ) : void		{			scoreEntry.x = 10;			scoreEntry.y = 106 + ( position * 31 );		}		private function updatePageButtons() : void		{			skin.previousPage.visible = ( _page > 1 );			skin.nextPage.visible = ( _page < _totalPages );		}				private function retrieveScoreFilter() : void		{			// default setting if tabs have been deleted			_scoreFilter = ScoreFilter.ALL;						switch ( _scoreFilterGroup.selection  )			{//				case skin.tabAllUsers://					_scoreFilter = ScoreFilter.ALL;//					break;									case skin.tabFriends:					_scoreFilter = ScoreFilter.FRIENDS;					break;			}		}	// ============================================================================================				private function scoreFilterChangeListener( event : Event ) : void		{			retrieveScoreFilter();			_page = 1;						invalidate();		}				protected function pageClickListener( event : MouseEvent ) : void		{			switch ( event.currentTarget )			{				case skin.jumpToMyScore:					_page = _userPage;					break;				case skin.previousPage:					--_page;					break;				case skin.nextPage:					++_page;					break;			}			updatePageButtons();						invalidate();		}				protected function closeClickListener( event : MouseEvent ) : void		{			dispatchEvent( new Event( Event.CLOSE ) );		}			// ============================================================================================			public function get level() : Level		{			return _level;		}		public function set level( value : Level ) : void		{			_level = value;			skin.levelName.text = _level.name;			_page = 1;						invalidate();		}				[ Inspectable( name="Page Size", defaultValue="7" ) ]		public function get pageSize() : uint		{			return _pageSize;		}		public function set pageSize( value : uint ) : void		{			_pageSize = value;			invalidate();		}	}}