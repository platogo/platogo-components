package com.platogo.components.ui{	import com.platogo.components.core.IDisposable;			import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;		/**	 * A RadioButtonGroup takes care of setting the right states for all radio buttons in a group.	 * 	 * <p>If a radio buttons that has not been selected before is clicked on its state is	 * automatically selected. The radio buttons that should belong to the same group are not	 * automatically set as not selected however. This is taken care of by the nice	 * RadioButtonGroup class.</p>	 */	public class RadioButtonGroup extends EventDispatcher implements IDisposable	{		// ============================================================================================				private var _radioButtons : Array;		private var _selectedRadioButton : RadioButton;	// ============================================================================================			/**		 * 		 */		public function RadioButtonGroup()		{			_radioButtons = new Array();		}				/**		 * 		 */		public function dispose() : void		{			while ( _radioButtons.length )			{				var radioButton : RadioButton = _radioButtons.pop() as RadioButton;				radioButton.removeEventListener( MouseEvent.CLICK, clickListener );			}						_selectedRadioButton = null;		}	// ============================================================================================			/**		 * 		 */		public function addRadioButton( radioButton : RadioButton ) : void		{			if ( radioButton )			{				radioButton.addEventListener( MouseEvent.CLICK, clickListener, false, 0, true );				_radioButtons.push( radioButton );			}		}	// ============================================================================================			/**		 * 		 */		private function clickListener( event : MouseEvent ) : void		{			selection = event.currentTarget as RadioButton;		}			// ============================================================================================			/**		 * 		 */		public function get selection() : RadioButton		{			return _selectedRadioButton;		}		public function set selection( value : RadioButton ) : void		{			var radioButton : RadioButton;						if ( value == null )			{				_selectedRadioButton = value;			}						for ( var i:int=_radioButtons.length-1; i>= 0; --i )			{				radioButton = _radioButtons[ i ] as RadioButton;								if ( radioButton == value )				{					_selectedRadioButton = value;					_selectedRadioButton.selected = true;				}				else				{					radioButton.selected = false;				}			}						dispatchEvent( new Event( Event.CHANGE ) );		}	}}