/*  Copyright (c) 2009 Platogo Interactive Entertainment GmbH  Permission is hereby granted, free of charge, to any person obtaining a copy  of this software and associated documentation files (the "Software"), to deal  in the Software without restriction, including without limitation the rights  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  copies of the Software, and to permit persons to whom the Software is  furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in  all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  THE SOFTWARE.*/package com.platogo.components.ui{	import com.platogo.components.core.IDisposable;			import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;		/**	 * Replicates the behaviour of a button but is using a movieclip instead.	 *	 * Use the frames like you would with a SimpleButton:	 *		* frame 1: default state	 *		* frame 2: over state	 *		* frame 3: down state	 *	 * Attention: custom hitarea (frame 4) is not implemented.	 */	public class CustomSimpleButton extends MovieClip implements IDisposable	{	// ========================================================================================			private static const NOT_DOWN : uint = 0;		private static const DOWN_ON_ME : uint = 1;		private static const DOWN_ON_SOMETHING_ELSE : uint = 2;			// ========================================================================================			private var _mouseDownState : uint;		// ========================================================================================			public function CustomSimpleButton()		{			_mouseDownState = CustomSimpleButton.NOT_DOWN;						gotoAndStop( 1 );			buttonMode = true;			mouseChildren = false;						addEventListener( Event.ADDED_TO_STAGE, addedToStageListener, false, 0, true );		}				public function dispose() : void		{			removeEventListener( Event.ADDED_TO_STAGE, addedToStageListener );						removeEventListener( MouseEvent.MOUSE_OVER, overListener );			removeEventListener( MouseEvent.MOUSE_OUT, outListener );						if ( stage != null )			{				stage.removeEventListener( Event.MOUSE_LEAVE, leaveListener );								stage.removeEventListener( MouseEvent.MOUSE_DOWN, downListener );				stage.removeEventListener( MouseEvent.MOUSE_UP, upListener );			}		}			// ========================================================================================			private function addedToStageListener( event : Event ) : void		{						addEventListener( MouseEvent.MOUSE_OVER, overListener, false, 0, true );			addEventListener( MouseEvent.MOUSE_OUT, outListener, false, 0, true );						stage.addEventListener( Event.MOUSE_LEAVE, leaveListener, false, 0, true );						stage.addEventListener( MouseEvent.MOUSE_DOWN, downListener, false, 0, true );			stage.addEventListener( MouseEvent.MOUSE_UP, upListener, false, 0, true );		}	// ========================================================================================				private function overListener( event : MouseEvent ) : void		{			if ( _mouseDownState == CustomSimpleButton.DOWN_ON_ME  )			{				gotoAndStop( 3 );			}			else if ( _mouseDownState == CustomSimpleButton.NOT_DOWN  )			{				gotoAndStop( 2 );			}		}			private function outListener( event : MouseEvent ) : void		{			( _mouseDownState == CustomSimpleButton.DOWN_ON_ME  ) ? gotoAndStop( 2 ) : gotoAndStop( 1 );		}				private function leaveListener( event : Event ) : void		{			_mouseDownState = CustomSimpleButton.NOT_DOWN;			gotoAndStop( 1 );		}			private function downListener( event : MouseEvent ) : void		{			if ( event.target == this )			{				_mouseDownState = CustomSimpleButton.DOWN_ON_ME;				gotoAndStop( 3 );							}			else			{				_mouseDownState = CustomSimpleButton.DOWN_ON_SOMETHING_ELSE;			}		}			/**		 * Fired even when mouse is outside stage (if mouse button has been pressed while moving		 * mouse outside).		 */		private function upListener( event : MouseEvent ) : void		{			_mouseDownState = CustomSimpleButton.NOT_DOWN;						( event.target == this ) ? overListener( null ) : outListener( null );		}	}}