/*  Copyright (c) 2009 Platogo Interactive Entertainment GmbH  Permission is hereby granted, free of charge, to any person obtaining a copy  of this software and associated documentation files (the "Software"), to deal  in the Software without restriction, including without limitation the rights  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  copies of the Software, and to permit persons to whom the Software is  furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in  all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  THE SOFTWARE.*/package com.platogo.components.ratings{	import flash.text.TextField;			import com.platogo.components.core.IDisposable;		import com.platogo.api.enums.PlatogoStatus;		import com.platogo.api.vo.PlatogoResponse;		import com.platogo.api.vo.Level;		import com.platogo.api.PlatogoAPI;		import com.platogo.api.vo.Rating;			import flash.events.MouseEvent;		import flash.display.Sprite;import com.platogo.components.utils.sprintf;			/**	 * @author sirflo	 */	public class DifficultyRating extends Sprite implements IDisposable	{	// ============================================================================================				private static var TXT_RATINGS : Array = [ "very easy", "easy", "medium", "hard", "very hard" ];		private static var TXT_TIMES_RATED : String = "%s rating";		private static var TXT_CURRENT_USER_RATING : String = ", you: %s";	// ============================================================================================		public var difficultyMask : Sprite;		public var difficultyColors : Sprite;		public var mouseTrack : Sprite;		public var subtitle : TextField;	// ============================================================================================				private var _enabled : Boolean;		private var _isCurrentlyEnabled : Boolean;		private var _level : Level;		private var _hasAlreadyRated : Boolean;		// ============================================================================================				public function DifficultyRating()		{			difficultyColors.visible = false;			enabled = true;		}		public function dispose() : void		{			enabled = false; // removes event listeners		}		// ============================================================================================				protected function setCurrentRatingMaskPos() : void		{			difficultyMask.x = ( _level != null ) ? ( _level.difficulty.averageRating - 1 ) * difficultyMask.width : -difficultyMask.width;					if ( _level != null )			{				subtitle.text = sprintf( DifficultyRating.TXT_TIMES_RATED, _level.difficulty.timesRated );								if ( _level.difficulty.timesRated != 1 )				{					subtitle.appendText( "s" );				}								if ( _level.difficulty.currentUserRating != 0 )				{					subtitle.appendText( sprintf( DifficultyRating.TXT_CURRENT_USER_RATING, _level.difficulty.currentUserRating ) );				}			}			else			{				subtitle.text = "";			}		}		protected function setRollOverMaskPos( x : Number ) : void		{			x = Math.max( 0, Math.min( mouseTrack.width-1, x ) );						difficultyMask.x = Math.floor( x / mouseTrack.width * 5 ) * difficultyMask.width;			subtitle.text = DifficultyRating.TXT_RATINGS[ Math.floor( x / mouseTrack.width * 5 ) ];		}				protected function updateEnabledState() : void		{			var value : Boolean = _enabled;			value &&= PlatogoAPI.currentUser.loggedIn;			value &&= ( _level != null );			value &&= ( _hasAlreadyRated == false );						if ( _isCurrentlyEnabled != value )			{				_isCurrentlyEnabled = value;				mouseTrack.buttonMode = _isCurrentlyEnabled;								if ( _isCurrentlyEnabled )				{					setCurrentRatingMaskPos();										mouseTrack.addEventListener( MouseEvent.MOUSE_OVER, trackRollOverListener, false, 0, true );					mouseTrack.addEventListener( MouseEvent.MOUSE_OUT, trackRollOutListener, false, 0, true );					mouseTrack.addEventListener( MouseEvent.CLICK, trackClickListener, false, 0, true );				}				else				{					mouseTrack.removeEventListener( MouseEvent.MOUSE_OVER, trackRollOverListener );					mouseTrack.removeEventListener( MouseEvent.MOUSE_OUT, trackRollOutListener );					mouseTrack.removeEventListener( MouseEvent.CLICK, trackClickListener );				}			}		}			// ============================================================================================				protected function trackRollOverListener( event : MouseEvent ) : void		{			setRollOverMaskPos( event.localX );						mouseTrack.addEventListener( MouseEvent.MOUSE_MOVE, trackMouseMoveListener, false, 0, true );			difficultyColors.visible = true;		}		protected function trackRollOutListener( event : MouseEvent ) : void		{			mouseTrack.removeEventListener( MouseEvent.MOUSE_MOVE, trackMouseMoveListener );			difficultyColors.visible = false;			setCurrentRatingMaskPos();		}				protected function trackMouseMoveListener( event : MouseEvent ) : void		{			setRollOverMaskPos( event.localX );		}		protected function trackClickListener( event : MouseEvent ) : void		{			PlatogoAPI.levelService.rateLevelDifficulty( _level, Math.ceil( event.localX / mouseTrack.width * 5 ), rateLevelDifficultyHandler );						_hasAlreadyRated = true;			updateEnabledState();			trackRollOutListener( event );		}			// ============================================================================================		/**		 * Update status.		 */		protected function rateLevelDifficultyHandler( response : PlatogoResponse ) : void		{			if ( response.status == PlatogoStatus.OK )			{				setCurrentRatingMaskPos();			}			else			{				_hasAlreadyRated = false;				updateEnabledState();			}		}			// ============================================================================================			public function get enabled() : Boolean		{			return _enabled;		}		public function set enabled( value : Boolean ) : void		{			_enabled = value;			updateEnabledState();		}				public function get showSubtitle() : Boolean		{			return subtitle.visible;		}		public function set showSubtitle( value : Boolean ) : void		{			subtitle.visible = value;		}		public function get level() : Level		{			return _level;		}		public function set level( value : Level ) : void		{			_level = value;			setCurrentRatingMaskPos();						_hasAlreadyRated = false;			updateEnabledState();		}	}}