/*  Copyright (c) 2009 Platogo Interactive Entertainment GmbH  Permission is hereby granted, free of charge, to any person obtaining a copy  of this software and associated documentation files (the "Software"), to deal  in the Software without restriction, including without limitation the rights  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  copies of the Software, and to permit persons to whom the Software is  furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in  all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  THE SOFTWARE.*/package com.platogo.components.core{	import flash.display.Sprite;	import flash.events.Event;		/**	 * The base class that all Platogo components extend from. It keeps it simple and ignores	 * lots of things UI components usually provide.	 * 	 * <p>Platogo preloader is an exception and doesn't extend <code>BaseComponent</code>	 * but instead keeps the code inside the movieclip asset. The preloader has to be	 * available before external classes are imported.</p>	 */	public class BaseComponent extends Sprite	{	//--------------------------------------	//  Constructor	//--------------------------------------			/**		 * Constructor.		 */		public function BaseComponent()		{			// add listeners to react upon creation of the component			addEventListener( Event.ADDED_TO_STAGE, addedToStageListener, false, 0, true );			addEventListener( Event.REMOVED_FROM_STAGE, removedFromStageListener, false, 0, true );		}			//--------------------------------------	//  Properties	//--------------------------------------		/**		 * 	@private		 *  A Boolean value that indicates whether the component has been initialized.		 */		protected var _initialized : Boolean;		/**		 * 	@private		 *  Storage for the invalidated property.		 */		protected var _invalidated : Boolean;				/**		 * A Boolean value that indicates whether the component has been invalidated.		 */		public function get invalidated() : Boolean		{			return _invalidated;		}			///--------------------------------------	//  Public Methods	//---------------------------------------			/**		 * Invalidates the component and requests a redrawing.		 */		public function invalidate() : void		{			if ( _initialized )			{				_invalidated = true;				stage.invalidate();			}		}			//--------------------------------------	//  Protected Methods	//--------------------------------------				/**		 * This method is being called when the component is added to the displaylist. It is		 * called once and is the perfect place for initialization routines.		 * 		 * <p>Components should overwrite and implement this method.</p>		 */		protected function initialize() : void		{		}				/**		 * This method is being called each time the component is invalidated.		 * 		 * <p>Components should overwrite and implement this method.</p>		 */		protected function draw() : void		{		}				/**		 * This method is being called when the component is disposed. This is the perfect place		 * to release any acquired resources.		 * 		 * <p>Components should overwrite and implement this method.</p>		 */		protected function cleanup() : void		{		}			//--------------------------------------	//  Event Handlers	//--------------------------------------				/**		 * @private		 * Initializes the component (only once) and starts listening for redraw requests.		 */		protected function addedToStageListener( event : Event ) : void		{			initialize();			_initialized = true;			invalidate();							addEventListener( Event.RENDER, renderListener, false, 0, true );		}				/**		 * @private		 * Stops listening for redraw requests. Disposes the component if		 * <code>automaticDisposal</code> is set to true.		 */		protected function removedFromStageListener( event : Event ) : void		{			removeEventListener( Event.RENDER, renderListener );			cleanup();			_initialized = false;		}				/**		 * @private		 * Redraw the component if there are unrendered changes to the component.		 */		protected function renderListener( event : Event ) : void		{			if ( _invalidated )			{				_invalidated = false;				draw();			}		}	}}