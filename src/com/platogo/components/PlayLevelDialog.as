/*  Copyright (c) 2009 Platogo Interactive Entertainment GmbH  Permission is hereby granted, free of charge, to any person obtaining a copy  of this software and associated documentation files (the "Software"), to deal  in the Software without restriction, including without limitation the rights  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  copies of the Software, and to permit persons to whom the Software is  furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in  all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  THE SOFTWARE.*/package com.platogo.components {	import com.platogo.api.PlatogoAPI;	import com.platogo.api.enums.ImageSize;	import com.platogo.api.enums.PlatogoStatus;	import com.platogo.api.vo.Level;	import com.platogo.api.vo.PlatogoResponse;	import com.platogo.components.core.BaseComponent;	import com.platogo.components.core.DisplayDummy;	import com.platogo.components.events.PlayEvent;	import com.platogo.components.utils.TextFormatter;	import com.platogo.components.utils.sprintf;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.Dictionary;			/**	 * @author sirflo	 */	public class PlayLevelDialog extends BaseComponent	{	// ============================================================================================		public var skin : MovieClip;				private var _dynamicText : Dictionary;		private var _level : Level;	// ============================================================================================				public function PlayLevelDialog()		{			DisplayDummy.substituteMissingChildren( skin, [ "levelImage", "levelName", "userImage", "userName",				"qualityRating", "difficultyRating", "lastModified", "timesPlayed", "playBtn", "cancel" ] );							_dynamicText = new Dictionary( true );			_dynamicText[ skin.lastModified ] = ( skin.lastModified.text is String ) ? skin.lastModified.text : "%s";			_dynamicText[ skin.timesPlayed ] = ( skin.timesPlayed.text is String ) ? skin.timesPlayed.text : "%s";		}	// ============================================================================================				override protected function initialize() : void		{			// set defaults			skin.levelImage.imageSize = ImageSize.MEDIUM;			skin.qualityRating.enabled = false;			skin.difficultyRating.enabled = false;						// add listeners			skin.playBtn.addEventListener( MouseEvent.CLICK, playClickListener, false, 0, true );			skin.cancel.addEventListener( MouseEvent.CLICK, cancelClickListener, false, 0, true );		}				override protected function cleanup() : void		{//			skin.levelImage.dispose();//			skin.levelImage = null;////			skin.userImage.dispose();//			skin.userImage = null;////			_dynamicText = null;			// remove listeners			skin.playBtn.removeEventListener( MouseEvent.CLICK, playClickListener );			skin.cancel.removeEventListener( MouseEvent.CLICK, cancelClickListener );		}				override protected function draw() : void		{			if ( _level != null )			{				skin.levelImage.level = _level;				skin.levelName.text = _level.name;				skin.lastModified.text = sprintf( _dynamicText[ skin.lastModified ], TextFormatter.formatDate( _level.lastModified ) );				skin.timesPlayed.text = sprintf( _dynamicText[ skin.timesPlayed ], TextFormatter.formatNumber( _level.timesPlayed ) );								skin.userImage.user = _level.creator;								skin.userName.text = _level.creator.name;							skin.qualityRating.level = _level;				skin.difficultyRating.level = _level;			}		}			// ============================================================================================		protected function playClickListener( event : MouseEvent ) : void		{			if ( autoInvokePlayLevel )			{				PlatogoAPI.levelService.playLevel( _level );			}						if ( autoLoadLevelData )			{				PlatogoAPI.levelService.loadLevelData( _level,					function( response : PlatogoResponse ) : void					{						if ( response.status == PlatogoStatus.OK ) // TODO: do something sensible when error occurs						{							dispatchEvent( new PlayEvent( PlayEvent.PLAY, false, false, _level, response.data ) );						}					}				);			}			else			{				dispatchEvent( new PlayEvent( PlayEvent.PLAY, false, false, _level ) );			}		}		protected function cancelClickListener( event : MouseEvent ) : void		{			dispatchEvent( new Event( Event.CANCEL ) );		}			// ============================================================================================			public function get level() : Level		{			return _level;		}		public function set level( value : Level ) : void		{			_level = value;			invalidate();		}				[ Inspectable( name="Auto Load LevelData", defaultValue="true" ) ]		public var autoLoadLevelData : Boolean = true;				[ Inspectable( name="Auto Invoke PlayLevel", defaultValue="true" ) ]		public var autoInvokePlayLevel : Boolean = true;	}}